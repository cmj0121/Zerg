ZIP		- 3
TITLE	- Design of the Zerg assembler
AUTHOR	- cmj<cmj@cmj.tw>
STATUS	- Activate
UPDATE	- 2017/05/22

# 簡介 #
Zasm (Zerg assembler) 是 Zerg 用來產生機械碼的一個直譯器。

# 語法 #
在 Zasm 中支援的語法包含了：opcode、字串、數字、引用變數與保留字五種，註解內容則是用井字
'#' 開頭並且遇到第一個換行符號 '\n' 結束。每次處理一行原始碼是 Zasm 的標準，換言之在 Zasm
中不支援多行程式碼，而縮排造成額外的空白字元 Zasm 也會直接忽略。


## OPCode ##
Zasm 支援的 opcode 會因為各平台而有所不同，每一個 opcode 都會對應到相對應的機械碼。
在 Zasm 中只要不是字串、數字、引用變數與保留字之外的符號，都會被視為潛在的 opcode。

## 字串 ##
在 Zasm 中字串是用單引號或雙引號所包圍，字串內容可以包含跳脫字元 (像是換行符號 '\n')。

## 數字 ##
Zasm 目前支援兩種數字型態的表示：十進位整數與十六進位整數。

## 引用變數 ##
`&` 開頭的變數代表被引用的變數值，這裡的變數可能是透過 `define` 定義的變數，或者是定位標籤
。如果被引用的變數是定義為一個數字，則會在直譯階段直接替換成所定義的值，如果被引用的內容，
是一個字串或者是定位標籤，則會在直譯階段動態轉換成相對應的位址。


## 保留字 ##
在 Zasm 中擁有多個表留字並都有相對應的使用用途：

	1. .zasm.entry 是 Zasm 程式的進入點，也是第一個執行到的子程序。
	2. 變數後面結尾帶有冒號 ':' 則代表是一個定位標籤，可以被視為是一個子程序的開頭。
	3. `define` 則是定義一個變數所擁有的內容。
	4. `include` 可以引用外部函式庫，包含程式碼與 zasm 編譯好的物件檔。
	5. `$` and `$$` 是用來標示位址的特殊符號：前者是標示當下位址、後者為前一個出現的定位點

# vim: set ft=markdown:
