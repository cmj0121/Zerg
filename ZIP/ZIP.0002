ZIP		- 2
TITLE	- Object in Zerg
AUTHOR	- cmj<cmj@cmj.tw>
STATUS	- Activate
UPDATE	- 2017/02/04

# 簡介 #

物件 (object) 在 Zerg 是一個被包裝過後的記憶體空間，用來描述被封裝的邏輯。一個最簡單的物件
，本身沒有任何屬性 (property) 與方法 (method)：

	- 記憶體空間由 `buffer` 提供
	- 建立出來的物件稱之為實體 (instance)
	- 實體可以被 `del` 釋放空間 [GC]
	- 實體間的屬性與方法各自獨立
	- 靜態屬性 (static property) 指到由物件提供的共同記憶體空間

在實作上，靜態編譯過程中會紀錄每一個實體的 reference count，並且當最後一個使用的變數不再引
用時，自動帶入 `del [變數]` 來釋放記憶體空間。而動態執行的部分，則是當 reference count 為
0 的時候自動對本身的實體執行一次 `del` 。


## 記憶體配置 ##

如果用記憶體空間來看，一個在 Zerg 的物件至少會有三個內建屬性：型態 (type)、引用次數
(reference count) 與識別字 (identify)。而屬性與方法則是成對的key-value 形式：

	                0         31         63
	+---- buffer -  +----------+----------+
	|               |   length of buffer  |
	|  +- object -  +---------------------+
	|  |            |   type   |  ref cnt |
	|  |            +---------------------+
	|  |            |      identify       | -> [ object name ]
	|  |            +---------------------+
	|  |            |  property name      |
	|  |            +---------------------+
	|  |            |  property logical   |
	|  |            +---------------------+
	~  ~            ~                     ~

最基本的物件可以透過 `object` 來呼叫，這個內建函數 (built-in function) 會產生一個大小為 24
bytes 的記憶體空間。產生出來的物件本身沒有任何屬性，型態為0x0000、引用次數
(reference count) 預設為 1 且名稱為空。當引用次數歸 0 的時候會自動呼叫 `del` 釋放記憶體空間
。

	                0         31         63
	+---- buffer -  +----------+----------+
	|               |       len = 8       |
	|  +- object -  +---------------------+
	|  |            |   0x0000 |  0x0001  |
	|  |            +---------------------+
	|  |            |     0x00000000      |
	+--+-  end   -  +---------------------+

而拿到實體的屬性，可以利用 `getattr` 來獲得：getattr 可以藉由搜尋特定字串，來判斷實體是否擁
有這個屬性。像是 getattr(x, '__init__') 就可以得到實體 `x`的屬性 __init__。這個系列是由內建
函數 (built-in function) 來提供，提供的屬性總共有三種：getattr、setattr、delattr。


## 繼承 ##

當物件繼承其他物件時會擁有一個特殊的屬性 `__inherit__` 用來儲存父物件。當在一個實體中搜尋屬
性卻找不到時，則會依序在 __inherit__ 中的父物件 (非實體) 中尋找可能的屬性，方式為深度優先
(DFS, Depth-First Search)。因此在多重繼承當中，則會以第一個優先找到的為主：依照下圖的繼承結
構為例，搜尋的優先順序為：Foo、cls_a、cla_a.1、cls_c、cls_b、cls_b.1 與 cls_b.2。

	       +-----+
	       | Foo |
	       +-----+
	        /   \
	       /     \
	      /       \
	 +--------+  +--------+
	 | cls_a  |  | cls_b  |
	 +--------+  +--------+
	     |          |    |
	     |          |    +--------+
	 +---------+ +---------+  +---------+
	 | cls_a.1 | | cls_b.1 |  | cls_b.2 |
	 +---------+ +---------+  +---------+
	       \                       /
	        \                     /
	         \                   /
	          \                 /
	          +-----------------+
	          |      cls_c      |
	          +-----------------+


## 唯讀 ##

當物件型態的最高位元 (most significant bit) 為 1 時，表示建立出來的實體，其屬性都為唯讀狀態
，也就是當實體從物件建立之後，他的屬性都不能被修改。在 Zerg 中，要另一個實體唯讀可以在建立
實體時額外使用保留字 `const` 來宣告這個實體，例如：

	# general instance
	x = object()

	# const instance
	const x = object()


## 問題 ##

在循環引用 (reference cycle) 出現時 reference count 就會無法正確判斷他的生命週期，也就是除
了兩個實體互相引用對方之外，再也沒有其他變數引用這些實體。這種情況下 reference count 就會無
法歸零而造成記憶體漏失 (Memory Leak)讓系統有額外記憶體浪費。

要解決循環引用的狀況，除了人為介入之外還可以走訪所有物件來判斷循環飲用的存在並主動排除。然
而這個情況下需要凍結整個系統 (至少不能有額外的實體產生)，導致會因系統實體數量變多而系統會有
顯著的停頓。在這種情況下，可以使用啟發方式 (heuristic) 來優化尋找群還飲用的狀況。


## 範例 ##

	# simple instance via `object`
	x = object()
	print x
	y = x
	del y
	del x

	# simple class `Foo`
	cls Foo():
		nop

	# instance created via `Foo`
	x = Foo()
	print x
	del x
