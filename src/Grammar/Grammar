# Grammar for Zerg
#
# Author  : cmj <cmj@cmj.tw>
# Date    : 2016/10/21
# Version : 0.2.1
#
# SPEC - provide minimal usage arithmetic with variable assignment

stmt   : [ assign | print ] NEWLINE
assign : [ WORD '=' ] test
print  : 'print' test
test   : or_test

or_test   : xor_test ( 'or'  xor_test )*
xor_test  : and_test ( 'xor' and_test )*
and_test  : not_test ( 'and' not_test )*
not_test  : [ 'not' ] bit_or 

bit_or   : bit_xor ( '|' bit_xor )*
bit_xor  : bit_and ( '^' bit_and )*
bit_and  : eq_test ( '&' eq_test )*

eq_test  : cmp_test ( ( 'eq' | 'not' 'eq' ) cmp_test )*
cmp_test : shift    ( ( 'ls' | 'le' | 'ge' | 'gr') shift )*

shift : arith ( ( '<<' | '>>' ) arith )*
arith : pow   ( ( '+' | '-' )   pow   )*
pow   : atom  ( ( '*' | '/' | '%' | '~' )  atom )*
atom  : [ '+' | '-' | '~' ] ( NUMBER | WORD )
